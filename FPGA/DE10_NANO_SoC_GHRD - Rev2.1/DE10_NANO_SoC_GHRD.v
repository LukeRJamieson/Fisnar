
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_NANO_SoC_GHRD(

    //////////// CLOCK //////////
    input               FPGA_CLK1_50,
    input               FPGA_CLK2_50,
    input               FPGA_CLK3_50,

    //////////// HDMI //////////
    inout               HDMI_I2C_SCL,
    inout               HDMI_I2C_SDA,
    inout               HDMI_I2S,
    inout               HDMI_LRCLK,
    inout               HDMI_MCLK,
    inout               HDMI_SCLK,
    output              HDMI_TX_CLK,
    output   [23: 0]    HDMI_TX_D,
    output              HDMI_TX_DE,
    output              HDMI_TX_HS,
    input               HDMI_TX_INT,
    output              HDMI_TX_VS,

    //////////// HPS //////////
    inout               HPS_CONV_USB_N,
    output   [14: 0]    HPS_DDR3_ADDR,
    output   [ 2: 0]    HPS_DDR3_BA,
    output              HPS_DDR3_CAS_N,
    output              HPS_DDR3_CK_N,
    output              HPS_DDR3_CK_P,
    output              HPS_DDR3_CKE,
    output              HPS_DDR3_CS_N,
    output   [ 3: 0]    HPS_DDR3_DM,
    inout    [31: 0]    HPS_DDR3_DQ,
    inout    [ 3: 0]    HPS_DDR3_DQS_N,
    inout    [ 3: 0]    HPS_DDR3_DQS_P,
    output              HPS_DDR3_ODT,
    output              HPS_DDR3_RAS_N,
    output              HPS_DDR3_RESET_N,
    input               HPS_DDR3_RZQ,
    output              HPS_DDR3_WE_N,
    output              HPS_ENET_GTX_CLK,
    inout               HPS_ENET_INT_N,
    output              HPS_ENET_MDC,
    inout               HPS_ENET_MDIO,
    input               HPS_ENET_RX_CLK,
    input    [ 3: 0]    HPS_ENET_RX_DATA,
    input               HPS_ENET_RX_DV,
    output   [ 3: 0]    HPS_ENET_TX_DATA,
    output              HPS_ENET_TX_EN,
    inout               HPS_GSENSOR_INT,
    inout               HPS_I2C0_SCLK,
    inout               HPS_I2C0_SDAT,
    inout               HPS_I2C1_SCLK,
    inout               HPS_I2C1_SDAT,
    inout               HPS_KEY,
    inout               HPS_LED,
    inout               HPS_LTC_GPIO,
    output              HPS_SD_CLK,
    inout               HPS_SD_CMD,
    inout    [ 3: 0]    HPS_SD_DATA,
    output              HPS_SPIM_CLK,
    input               HPS_SPIM_MISO,
    output              HPS_SPIM_MOSI,
    inout               HPS_SPIM_SS,
    input               HPS_UART_RX,
    output              HPS_UART_TX,
    input               HPS_USB_CLKOUT,
    inout    [ 7: 0]    HPS_USB_DATA,
    input               HPS_USB_DIR,
    input               HPS_USB_NXT,
    output              HPS_USB_STP,

    //////////// KEY //////////
    input    [ 1: 0]    KEY,

    //////////// LED //////////
    output   [ 7: 0]    LED,

    //////////// SW //////////
    input    [ 3: 0]    SW,
	 
	 ///////////////FISNAR Control Board Rev2.1/////////////////
	 input PANEL_START,			
	 input TEACH_SWITCH,	
	 input PANEL_EMG,				

	 input LIMIT_SWITCH_X,				
	 input LIMIT_SWITCH_Y,
	 input LIMIT_SWITCH_Z,				

	 output MOTOR_X_CW,
	 output MOTOR_X_CCW,
	 output MOTOR_X_AWOFF,
		
	 output MOTOR_Y_CW,
	 output MOTOR_Y_CCW,
	 output MOTOR_Y_AWOFF,
		
	 output MOTOR_Z_CW,
	 output MOTOR_Z_CCW,
	 output MOTOR_Z_AWOFF,

	 output RUN,			

	 output DIS,		  
	 
	 input [3:0]PROG_TENS,
	 input [3:0]PROG_ONES,
	
	 output [8:1]REAR_IO_OUT,
	 input [8:1]REAR_IO_IN,
	
	 input EXT_CONN_START,
	 input EXT_CONN_DOOR_NC,
	 input EXT_CONN_DOOR_NO,
	 input EXT_CONN_EMG,

	 inout [6:0]TEACH,
	 
	 output [3:0]EXTRA_R,
	 output [6:0]EXTRA_L,
	
	 output POLOLU_EN,
	 output [2:0]POLOLU_M,
	 output POLOLU_STEP,
	 output POLOLU_DIR,
	
	 inout PS2_CLK,
	 inout PS2_DATA,

	 output BUZZER, //PIN_AH27
	
	 input serial_SDO, // From ADC
	 output output_SCK, //To ADC 40MHz
	 output SDI,	// To ADC
	 output CONVSRT // To ADC
	 
);




//=======================================================
//  REG/WIRE declarations
//=======================================================
wire hps_fpga_reset_n;
wire     [1: 0]     fpga_debounced_buttons;
wire     [7: 0]     fpga_led_internal;
wire     [2: 0]     hps_reset_req;
wire                hps_cold_reset;
wire                hps_warm_reset;
wire                hps_debug_reset;
wire     [27: 0]    stm_hw_events;
wire                fpga_clk_50;

wire					  x_AWOff,y_AWOff,z_AWOff;
wire		[31: 0]	  x_CR,y_CR,z_CR;
wire		[31: 0]	  x_target,y_target,z_target;
wire		[31: 0]	  x_max_speed_count,y_max_speed_count,z_max_speed_count;
wire		[31: 0]	  x_min_speed_count,y_min_speed_count,z_min_speed_count;
wire		[31: 0]	  x_accel_steps,y_accel_steps,z_accel_steps;
wire		[31: 0]	  x_speed_increment,y_speed_increment,z_speed_increment;
wire		[31: 0]	  x_homing_speed_count,y_homing_speed_count,z_homing_speed_count;
wire		[31: 0]	  x_home_location,y_home_location,z_home_location;
wire		[31: 0]	  x_lower_limit,y_lower_limit,z_lower_limit;
wire		[31: 0]	  x_upper_limit,y_upper_limit,z_upper_limit;
wire					  x_cw,x_ccw,y_cw,y_ccw,z_cw,z_ccw;
wire		[31: 0]	  x_location,y_location,z_location;
wire		[31: 0]	  x_StatusCode,y_StatusCode,z_StatusCode;
wire		[31: 0]	  clk_freq_div_2;
wire		[15: 0]	  ADC1;
wire		[15: 0]	  ADC2;
wire		[31: 0]	  ADC = (ADC2 << 16) | ADC1;
wire		[31: 0]	  DISPENSE;
wire		[30: 0]	  DIS_Timer = DISPENSE[30:0];
wire					  DIS_Start = DISPENSE[31];
wire					  DIS_Signal;
wire 		[31: 0]	  INPUTS = {6'b0,PROG_TENS,PROG_ONES,REAR_IO_IN,EXT_CONN_START,EXT_CONN_DOOR_NC,EXT_CONN_DOOR_NO,EXT_CONN_EMG,PANEL_START,TEACH_SWITCH,PANEL_EMG,LIMIT_SWITCH_X,LIMIT_SWITCH_Y,LIMIT_SWITCH_Z};
wire		[31: 0]	  OUTPUTS;

wire 		[31: 0]	  teach_hps2fpga;
wire 		[31: 0]	  teach_fpga2hps;


// connection of internal logics
assign fpga_clk_50 = FPGA_CLK1_50;
assign stm_hw_events = {{15{1'b0}}, SW, fpga_led_internal, fpga_debounced_buttons};

// ------ AW Off ------//
assign x_AWOff = x_CR[3]; // Signal to Submodule
assign y_AWOff = y_CR[3];
assign z_AWOff = z_CR[3];

assign MOTOR_X_AWOFF = x_CR[3]; // Signal to Physical Motor
assign MOTOR_Y_AWOFF = y_CR[3];
assign MOTOR_Z_AWOFF = z_CR[3];
// ----------------------------- //

// --- Stop Signals to Motor if AW Off ---/
assign MOTOR_X_CW = x_cw & ~x_AWOff;
assign MOTOR_Y_CW = y_cw & ~y_AWOff;
assign MOTOR_Z_CW = z_cw & ~z_AWOff;

assign MOTOR_X_CCW = x_ccw & ~x_AWOff;
assign MOTOR_Y_CCW = y_ccw & ~y_AWOff;
assign MOTOR_Z_CCW = z_ccw & ~z_AWOff;
// ------------------------------------- //

assign REAR_IO_OUT = OUTPUTS[7:0];
assign LED = fpga_led_internal;
assign RUN = OUTPUTS[19];
assign DIS = DIS_Signal | OUTPUTS[20];
assign EXTRA_L[3:0] = OUTPUTS[11:8];
assign EXTRA_R = OUTPUTS[18:15];
//DEBUG SPI
assign EXTRA_L[4] = serial_SDO;
assign EXTRA_L[5] = output_SCK;
assign EXTRA_L[6] = SDI;

// Teach Pendant
assign TEACH[6] = teach_hps2fpga[13] ? teach_hps2fpga[6] : 1'bz ;
assign teach_fpga2hps[6] = TEACH[6];

assign TEACH[5] = teach_hps2fpga[12] ? teach_hps2fpga[5] : 1'bz ;
assign teach_fpga2hps[5] = TEACH[5];

assign TEACH[4] = teach_hps2fpga[11] ? teach_hps2fpga[4] : 1'bz ;
assign teach_fpga2hps[4] = TEACH[4];

assign TEACH[3] = teach_hps2fpga[10] ? teach_hps2fpga[3] : 1'bz ;
assign teach_fpga2hps[3] = TEACH[3];

assign TEACH[2] = teach_hps2fpga[9] ? teach_hps2fpga[2] : 1'bz ;
assign teach_fpga2hps[2] = TEACH[2];

assign TEACH[1] = teach_hps2fpga[8] ? teach_hps2fpga[1] : 1'bz ;
assign teach_fpga2hps[1] = TEACH[1];

assign TEACH[0] = teach_hps2fpga[7] ? teach_hps2fpga[0] : 1'bz ;
assign teach_fpga2hps[0] = TEACH[0];





//=======================================================
//  Structural coding
//=======================================================
soc_system u0(
               //Clock&Reset
               .clk_clk(FPGA_CLK1_50),                                      //                            clk.clk
               .reset_reset_n(hps_fpga_reset_n),                            //                          reset.reset_n
               //HPS ddr3
               .memory_mem_a(HPS_DDR3_ADDR),                                //                         memory.mem_a
               .memory_mem_ba(HPS_DDR3_BA),                                 //                               .mem_ba
               .memory_mem_ck(HPS_DDR3_CK_P),                               //                               .mem_ck
               .memory_mem_ck_n(HPS_DDR3_CK_N),                             //                               .mem_ck_n
               .memory_mem_cke(HPS_DDR3_CKE),                               //                               .mem_cke
               .memory_mem_cs_n(HPS_DDR3_CS_N),                             //                               .mem_cs_n
               .memory_mem_ras_n(HPS_DDR3_RAS_N),                           //                               .mem_ras_n
               .memory_mem_cas_n(HPS_DDR3_CAS_N),                           //                               .mem_cas_n
               .memory_mem_we_n(HPS_DDR3_WE_N),                             //                               .mem_we_n
               .memory_mem_reset_n(HPS_DDR3_RESET_N),                       //                               .mem_reset_n
               .memory_mem_dq(HPS_DDR3_DQ),                                 //                               .mem_dq
               .memory_mem_dqs(HPS_DDR3_DQS_P),                             //                               .mem_dqs
               .memory_mem_dqs_n(HPS_DDR3_DQS_N),                           //                               .mem_dqs_n
               .memory_mem_odt(HPS_DDR3_ODT),                               //                               .mem_odt
               .memory_mem_dm(HPS_DDR3_DM),                                 //                               .mem_dm
               .memory_oct_rzqin(HPS_DDR3_RZQ),                             //                               .oct_rzqin
               //HPS ethernet
               .hps_0_hps_io_hps_io_emac1_inst_TX_CLK(HPS_ENET_GTX_CLK),    //                   hps_0_hps_io.hps_io_emac1_inst_TX_CLK
               .hps_0_hps_io_hps_io_emac1_inst_TXD0(HPS_ENET_TX_DATA[0]),   //                               .hps_io_emac1_inst_TXD0
               .hps_0_hps_io_hps_io_emac1_inst_TXD1(HPS_ENET_TX_DATA[1]),   //                               .hps_io_emac1_inst_TXD1
               .hps_0_hps_io_hps_io_emac1_inst_TXD2(HPS_ENET_TX_DATA[2]),   //                               .hps_io_emac1_inst_TXD2
               .hps_0_hps_io_hps_io_emac1_inst_TXD3(HPS_ENET_TX_DATA[3]),   //                               .hps_io_emac1_inst_TXD3
               .hps_0_hps_io_hps_io_emac1_inst_RXD0(HPS_ENET_RX_DATA[0]),   //                               .hps_io_emac1_inst_RXD0
               .hps_0_hps_io_hps_io_emac1_inst_MDIO(HPS_ENET_MDIO),         //                               .hps_io_emac1_inst_MDIO
               .hps_0_hps_io_hps_io_emac1_inst_MDC(HPS_ENET_MDC),           //                               .hps_io_emac1_inst_MDC
               .hps_0_hps_io_hps_io_emac1_inst_RX_CTL(HPS_ENET_RX_DV),      //                               .hps_io_emac1_inst_RX_CTL
               .hps_0_hps_io_hps_io_emac1_inst_TX_CTL(HPS_ENET_TX_EN),      //                               .hps_io_emac1_inst_TX_CTL
               .hps_0_hps_io_hps_io_emac1_inst_RX_CLK(HPS_ENET_RX_CLK),     //                               .hps_io_emac1_inst_RX_CLK
               .hps_0_hps_io_hps_io_emac1_inst_RXD1(HPS_ENET_RX_DATA[1]),   //                               .hps_io_emac1_inst_RXD1
               .hps_0_hps_io_hps_io_emac1_inst_RXD2(HPS_ENET_RX_DATA[2]),   //                               .hps_io_emac1_inst_RXD2
               .hps_0_hps_io_hps_io_emac1_inst_RXD3(HPS_ENET_RX_DATA[3]),   //                               .hps_io_emac1_inst_RXD3
               //HPS SD card
               .hps_0_hps_io_hps_io_sdio_inst_CMD(HPS_SD_CMD),              //                               .hps_io_sdio_inst_CMD
               .hps_0_hps_io_hps_io_sdio_inst_D0(HPS_SD_DATA[0]),           //                               .hps_io_sdio_inst_D0
               .hps_0_hps_io_hps_io_sdio_inst_D1(HPS_SD_DATA[1]),           //                               .hps_io_sdio_inst_D1
               .hps_0_hps_io_hps_io_sdio_inst_CLK(HPS_SD_CLK),              //                               .hps_io_sdio_inst_CLK
               .hps_0_hps_io_hps_io_sdio_inst_D2(HPS_SD_DATA[2]),           //                               .hps_io_sdio_inst_D2
               .hps_0_hps_io_hps_io_sdio_inst_D3(HPS_SD_DATA[3]),           //                               .hps_io_sdio_inst_D3
               //HPS USB
               .hps_0_hps_io_hps_io_usb1_inst_D0(HPS_USB_DATA[0]),          //                               .hps_io_usb1_inst_D0
               .hps_0_hps_io_hps_io_usb1_inst_D1(HPS_USB_DATA[1]),          //                               .hps_io_usb1_inst_D1
               .hps_0_hps_io_hps_io_usb1_inst_D2(HPS_USB_DATA[2]),          //                               .hps_io_usb1_inst_D2
               .hps_0_hps_io_hps_io_usb1_inst_D3(HPS_USB_DATA[3]),          //                               .hps_io_usb1_inst_D3
               .hps_0_hps_io_hps_io_usb1_inst_D4(HPS_USB_DATA[4]),          //                               .hps_io_usb1_inst_D4
               .hps_0_hps_io_hps_io_usb1_inst_D5(HPS_USB_DATA[5]),          //                               .hps_io_usb1_inst_D5
               .hps_0_hps_io_hps_io_usb1_inst_D6(HPS_USB_DATA[6]),          //                               .hps_io_usb1_inst_D6
               .hps_0_hps_io_hps_io_usb1_inst_D7(HPS_USB_DATA[7]),          //                               .hps_io_usb1_inst_D7
               .hps_0_hps_io_hps_io_usb1_inst_CLK(HPS_USB_CLKOUT),          //                               .hps_io_usb1_inst_CLK
               .hps_0_hps_io_hps_io_usb1_inst_STP(HPS_USB_STP),             //                               .hps_io_usb1_inst_STP
               .hps_0_hps_io_hps_io_usb1_inst_DIR(HPS_USB_DIR),             //                               .hps_io_usb1_inst_DIR
               .hps_0_hps_io_hps_io_usb1_inst_NXT(HPS_USB_NXT),             //                               .hps_io_usb1_inst_NXT
               //HPS SPI
               .hps_0_hps_io_hps_io_spim1_inst_CLK(HPS_SPIM_CLK),           //                               .hps_io_spim1_inst_CLK
               .hps_0_hps_io_hps_io_spim1_inst_MOSI(HPS_SPIM_MOSI),         //                               .hps_io_spim1_inst_MOSI
               .hps_0_hps_io_hps_io_spim1_inst_MISO(HPS_SPIM_MISO),         //                               .hps_io_spim1_inst_MISO
               .hps_0_hps_io_hps_io_spim1_inst_SS0(HPS_SPIM_SS),            //                               .hps_io_spim1_inst_SS0
               //HPS UART
               .hps_0_hps_io_hps_io_uart0_inst_RX(HPS_UART_RX),             //                               .hps_io_uart0_inst_RX
               .hps_0_hps_io_hps_io_uart0_inst_TX(HPS_UART_TX),             //                               .hps_io_uart0_inst_TX
               //HPS I2C1
               .hps_0_hps_io_hps_io_i2c0_inst_SDA(HPS_I2C0_SDAT),           //                               .hps_io_i2c0_inst_SDA
               .hps_0_hps_io_hps_io_i2c0_inst_SCL(HPS_I2C0_SCLK),           //                               .hps_io_i2c0_inst_SCL
               //HPS I2C2
               .hps_0_hps_io_hps_io_i2c1_inst_SDA(HPS_I2C1_SDAT),           //                               .hps_io_i2c1_inst_SDA
               .hps_0_hps_io_hps_io_i2c1_inst_SCL(HPS_I2C1_SCLK),           //                               .hps_io_i2c1_inst_SCL
               //GPIO
               .hps_0_hps_io_hps_io_gpio_inst_GPIO09(HPS_CONV_USB_N),       //                               .hps_io_gpio_inst_GPIO09
               .hps_0_hps_io_hps_io_gpio_inst_GPIO35(HPS_ENET_INT_N),       //                               .hps_io_gpio_inst_GPIO35
               .hps_0_hps_io_hps_io_gpio_inst_GPIO40(HPS_LTC_GPIO),         //                               .hps_io_gpio_inst_GPIO40
               .hps_0_hps_io_hps_io_gpio_inst_GPIO53(HPS_LED),              //                               .hps_io_gpio_inst_GPIO53
               .hps_0_hps_io_hps_io_gpio_inst_GPIO54(HPS_KEY),              //                               .hps_io_gpio_inst_GPIO54
               .hps_0_hps_io_hps_io_gpio_inst_GPIO61(HPS_GSENSOR_INT),      //                               .hps_io_gpio_inst_GPIO61
               //FPGA Partion
               .led_pio_external_connection_export(fpga_led_internal),      //    led_pio_external_connection.export
               .dipsw_pio_external_connection_export(SW),                   //  dipsw_pio_external_connection.export
               .button_pio_external_connection_export(fpga_debounced_buttons),
                                                                            // button_pio_external_connection.export
               .hps_0_h2f_reset_reset_n(hps_fpga_reset_n),                  //                hps_0_h2f_reset.reset_n
               .hps_0_f2h_cold_reset_req_reset_n(~hps_cold_reset),          //       hps_0_f2h_cold_reset_req.reset_n
               .hps_0_f2h_debug_reset_req_reset_n(~hps_debug_reset),        //      hps_0_f2h_debug_reset_req.reset_n
               .hps_0_f2h_stm_hw_events_stm_hwevents(stm_hw_events),        //        hps_0_f2h_stm_hw_events.stm_hwevents
               .hps_0_f2h_warm_reset_req_reset_n(~hps_warm_reset),          //       hps_0_f2h_warm_reset_req.reset_n
					
					.x_motor_accelstep_pio_external_connection_export(x_accel_steps),     //     x_motor_accelstep_pio_external_connection.export
					.x_motor_ctrl_pio_external_connection_export(x_CR),          //          x_motor_ctrl_pio_external_connection.export
					.x_motor_homeloc_pio_external_connection_export(x_home_location),       //       x_motor_homeloc_pio_external_connection.export
					.x_motor_homespeed_pio_external_connection_export(x_homing_speed_count),     //     x_motor_homespeed_pio_external_connection.export
					.x_motor_location_pio_external_connection_export(x_location),      //      x_motor_location_pio_external_connection.export
					.x_motor_lowerlimit_pio_external_connection_export(x_lower_limit),    //    x_motor_lowerlimit_pio_external_connection.export
					.x_motor_max_speed_pio_external_connection_export(x_max_speed_count),     //     x_motor_max_speed_pio_external_connection.export
					.x_motor_min_speed_pio_external_connection_export(x_min_speed_count),     //     x_motor_min_speed_pio_external_connection.export
					.x_motor_status_pio_external_connection_export(32'b0 | x_StatusCode),        //        x_motor_status_pio_external_connection.export
					.x_motor_stepincrement_pio_external_connection_export(x_speed_increment), // x_motor_stepincrement_pio_external_connection.export
					.x_motor_target_pio_external_connection_export(x_target),        //        x_motor_target_pio_external_connection.export
					.x_motor_upperlimit_pio_external_connection_export(x_upper_limit),    //    x_motor_upperlimit_pio_external_connection.export
					
					.y_motor_accelstep_pio_external_connection_export(y_accel_steps),     //     y_motor_accelstep_pio_external_connection.export
					.y_motor_ctrl_pio_external_connection_export(y_CR),          //          y_motor_ctrl_pio_external_connection.export
					.y_motor_homeloc_pio_external_connection_export(y_home_location),       //       y_motor_homeloc_pio_external_connection.export
					.y_motor_homespeed_pio_external_connection_export(y_homing_speed_count),     //     y_motor_homespeed_pio_external_connection.export
					.y_motor_location_pio_external_connection_export(y_location),      //      y_motor_location_pio_external_connection.export
					.y_motor_lowerlimit_pio_external_connection_export(y_lower_limit),    //    y_motor_lowerlimit_pio_external_connection.export
					.y_motor_max_speed_pio_external_connection_export(y_max_speed_count),     //     y_motor_max_speed_pio_external_connection.export
					.y_motor_min_speed_pio_external_connection_export(y_min_speed_count),     //     y_motor_min_speed_pio_external_connection.export
					.y_motor_status_pio_external_connection_export(32'b0 | y_StatusCode),        //        y_motor_status_pio_external_connection.export
					.y_motor_stepincrement_pio_external_connection_export(y_speed_increment), // y_motor_stepincrement_pio_external_connection.export
					.y_motor_target_pio_external_connection_export(y_target),        //        y_motor_target_pio_external_connection.export
					.y_motor_upperlimit_pio_external_connection_export(y_upper_limit),    //    y_motor_upperlimit_pio_external_connection.export
					
					.z_motor_accelstep_pio_external_connection_export(z_accel_steps),     //     z_motor_accelstep_pio_external_connection.export
					.z_motor_ctrl_pio_external_connection_export(z_CR),          //          z_motor_ctrl_pio_external_connection.export
					.z_motor_homeloc_pio_external_connection_export(z_home_location),       //       z_motor_homeloc_pio_external_connection.export
					.z_motor_homespeed_pio_external_connection_export(z_homing_speed_count),     //     z_motor_homespeed_pio_external_connection.export
					.z_motor_location_pio_external_connection_export(z_location),      //      z_motor_location_pio_external_connection.export
					.z_motor_lowerlimit_pio_external_connection_export(z_lower_limit),    //    z_motor_lowerlimit_pio_external_connection.export
					.z_motor_max_speed_pio_external_connection_export(z_max_speed_count),     //     z_motor_max_speed_pio_external_connection.export
					.z_motor_min_speed_pio_external_connection_export(z_min_speed_count),     //     z_motor_min_speed_pio_external_connection.export
					.z_motor_status_pio_external_connection_export(32'b0 | z_StatusCode),        //        z_motor_status_pio_external_connection.export
					.z_motor_stepincrement_pio_external_connection_export(z_speed_increment), // z_motor_stepincrement_pio_external_connection.export
					.z_motor_target_pio_external_connection_export(z_target),        //        z_motor_target_pio_external_connection.export
					.z_motor_upperlimit_pio_external_connection_export(z_upper_limit),    //    z_motor_upperlimit_pio_external_connection.export
					
					.clk_freq_div_2_external_connection_export(clk_freq_div_2),
					
					.pololu_external_connection_export(),                    //                    pololu_external_connection.export
					.joystick_external_connection_export(ADC),                  //                  joystick_external_connection.export
					.dispense_timer_external_connection_export(DISPENSE),
					.fisnar_inputs_external_connection_export(INPUTS),             //             fisnar_inputs_external_connection.export
					.fisnar_outputs_external_connection_export(OUTPUTS),            //            fisnar_outputs_external_connection.export
					
					.teach_fpga2hps_external_connection_export(teach_fpga2hps),            //            teach_fpga2hps_external_connection.export
					.teach_hps2fpga_external_connection_export(teach_hps2fpga),            //            teach_hps2fpga_external_connection.export
           );
			  
MotorControl x_axis(
					.clk(FPGA_CLK1_50),
					.rst(hps_fpga_reset_n),
					.CR(x_CR),
					.Target(x_target),
					.LS(LIMIT_SWITCH_X),
					.AWOff(x_AWOff),
					.max_speed_freq(x_max_speed_count),
					.min_speed_freq(x_min_speed_count),
					.accel_steps(x_accel_steps),
					.freq_increment(x_speed_increment), 
					.homing_speed_freq(x_homing_speed_count),
					.clk_freq_div_2(clk_freq_div_2),
					.home_location(x_home_location),
					.lower_limit(x_lower_limit),
					.upper_limit(x_upper_limit),
					.CW(x_cw),
					.CCW(x_ccw),
					.Location(x_location),
					.StatusCode(x_StatusCode),
);

MotorControl y_axis(
					.clk(FPGA_CLK1_50),
					.rst(hps_fpga_reset_n),
					.CR(y_CR),
					.Target(y_target),
					.LS(LIMIT_SWITCH_Y),
					.AWOff(y_AWOff),
					.max_speed_freq(y_max_speed_count),
					.min_speed_freq(y_min_speed_count),
					.accel_steps(y_accel_steps),
					.freq_increment(y_speed_increment), 
					.homing_speed_freq(x_homing_speed_count),
					.clk_freq_div_2(clk_freq_div_2),
					.home_location(y_home_location), 
					.lower_limit(y_lower_limit),
					.upper_limit(y_upper_limit),
					.CW(y_cw),
					.CCW(y_ccw),
					.Location(y_location),
					.StatusCode(y_StatusCode),
);

MotorControl z_axis(
					.clk(FPGA_CLK1_50),
					.rst(hps_fpga_reset_n),
					.CR(z_CR),
					.Target(z_target),
					.LS(LIMIT_SWITCH_Z),
					.AWOff(z_AWOff),
					.max_speed_freq(z_max_speed_count),
					.min_speed_freq(z_min_speed_count),
					.accel_steps(z_accel_steps),
					.freq_increment(z_speed_increment), 
					.homing_speed_freq(z_homing_speed_count),
					.clk_freq_div_2(clk_freq_div_2),
					.home_location(z_home_location), 
					.lower_limit(z_lower_limit),
					.upper_limit(z_upper_limit),
					.CW(z_cw),
					.CCW(z_ccw),
					.Location(z_location),
					.StatusCode(z_StatusCode),
);

ADCcontrol Joystick(
					.FPGA_CLK1_50(FPGA_CLK1_50), // From FPGA
					.serial_SDO(serial_SDO), // From ADC
					.reset_n(hps_fpga_reset_n), // From user key

					.output_SCK(output_SCK), //To ADC 40MHz
					.SDI(SDI),	// To ADC
					.CONVSRT(CONVSRT), // To ADC

					.ADC1(ADC1),
					.ADC2(ADC2)

);

Dispense_Timer Dispense_Timer
(
					.FPGA_CLK1_50(FPGA_CLK1_50),
					.timer(DIS_Timer),
					.start_timer(DIS_Start),
					.dispense_sig(DIS_Signal)
);

// Debounce logic to clean out glitches within 1ms
debounce debounce_inst(
             .clk(fpga_clk_50),
             .reset_n(hps_fpga_reset_n),
             .data_in(KEY),
             .data_out(fpga_debounced_buttons)
         );
defparam debounce_inst.WIDTH = 2;
defparam debounce_inst.POLARITY = "LOW";
defparam debounce_inst.TIMEOUT = 50000;               // at 50Mhz this is a debounce time of 1ms
defparam debounce_inst.TIMEOUT_WIDTH = 16;            // ceil(log2(TIMEOUT))

// Source/Probe megawizard instance
hps_reset hps_reset_inst(
              .source_clk(fpga_clk_50),
              .source(hps_reset_req)
          );

altera_edge_detector pulse_cold_reset(
                         .clk(fpga_clk_50),
                         .rst_n(hps_fpga_reset_n),
                         .signal_in(hps_reset_req[0]),
                         .pulse_out(hps_cold_reset)
                     );
defparam pulse_cold_reset.PULSE_EXT = 6;
defparam pulse_cold_reset.EDGE_TYPE = 1;
defparam pulse_cold_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_warm_reset(
                         .clk(fpga_clk_50),
                         .rst_n(hps_fpga_reset_n),
                         .signal_in(hps_reset_req[1]),
                         .pulse_out(hps_warm_reset)
                     );
defparam pulse_warm_reset.PULSE_EXT = 2;
defparam pulse_warm_reset.EDGE_TYPE = 1;
defparam pulse_warm_reset.IGNORE_RST_WHILE_BUSY = 1;

altera_edge_detector pulse_debug_reset(
                         .clk(fpga_clk_50),
                         .rst_n(hps_fpga_reset_n),
                         .signal_in(hps_reset_req[2]),
                         .pulse_out(hps_debug_reset)
                     );
defparam pulse_debug_reset.PULSE_EXT = 32;
defparam pulse_debug_reset.EDGE_TYPE = 1;
defparam pulse_debug_reset.IGNORE_RST_WHILE_BUSY = 1;




endmodule
