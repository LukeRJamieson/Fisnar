// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/03/2022 18:35:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MotorControl
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MotorControl_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AWOff;
reg [31:0] CR;
reg LS;
reg [31:0] Target;
reg [31:0] accel_steps;
reg clk;
reg [31:0] clk_freq_div_2;
reg [31:0] freq_increment;
reg [31:0] home_location;
reg [31:0] homing_speed_freq;
reg [31:0] lower_limit;
reg [31:0] max_speed_freq;
reg [31:0] min_speed_freq;
reg rst;
reg [31:0] upper_limit;
// wires                                               
wire CCW;
wire CW;
wire Done;
wire [31:0] Location;
wire [3:0] StatusCode;
wire [31:0] debug_current_count;
wire [31:0] debug_current_freq;

// assign statements (if any)                          
MotorControl i1 (
// port map - connection between master ports and signals/registers   
	.AWOff(AWOff),
	.CCW(CCW),
	.CR(CR),
	.CW(CW),
	.Done(Done),
	.LS(LS),
	.Location(Location),
	.StatusCode(StatusCode),
	.Target(Target),
	.accel_steps(accel_steps),
	.clk(clk),
	.clk_freq_div_2(clk_freq_div_2),
	.debug_current_count(debug_current_count),
	.debug_current_freq(debug_current_freq),
	.freq_increment(freq_increment),
	.home_location(home_location),
	.homing_speed_freq(homing_speed_freq),
	.lower_limit(lower_limit),
	.max_speed_freq(max_speed_freq),
	.min_speed_freq(min_speed_freq),
	.rst(rst),
	.upper_limit(upper_limit)
);
initial 
begin 
#4000000 $finish;
end 

// AWOff
initial
begin
	AWOff = 1'b0;
end 
// CR[ 31 ]
initial
begin
	CR[31] = 1'b0;
end 
// CR[ 30 ]
initial
begin
	CR[30] = 1'b0;
end 
// CR[ 29 ]
initial
begin
	CR[29] = 1'b0;
end 
// CR[ 28 ]
initial
begin
	CR[28] = 1'b0;
end 
// CR[ 27 ]
initial
begin
	CR[27] = 1'b0;
end 
// CR[ 26 ]
initial
begin
	CR[26] = 1'b0;
end 
// CR[ 25 ]
initial
begin
	CR[25] = 1'b0;
end 
// CR[ 24 ]
initial
begin
	CR[24] = 1'b0;
end 
// CR[ 23 ]
initial
begin
	CR[23] = 1'b0;
end 
// CR[ 22 ]
initial
begin
	CR[22] = 1'b0;
end 
// CR[ 21 ]
initial
begin
	CR[21] = 1'b0;
end 
// CR[ 20 ]
initial
begin
	CR[20] = 1'b0;
end 
// CR[ 19 ]
initial
begin
	CR[19] = 1'b0;
end 
// CR[ 18 ]
initial
begin
	CR[18] = 1'b0;
end 
// CR[ 17 ]
initial
begin
	CR[17] = 1'b0;
end 
// CR[ 16 ]
initial
begin
	CR[16] = 1'b0;
end 
// CR[ 15 ]
initial
begin
	CR[15] = 1'b0;
end 
// CR[ 14 ]
initial
begin
	CR[14] = 1'b0;
end 
// CR[ 13 ]
initial
begin
	CR[13] = 1'b0;
end 
// CR[ 12 ]
initial
begin
	CR[12] = 1'b0;
end 
// CR[ 11 ]
initial
begin
	CR[11] = 1'b0;
end 
// CR[ 10 ]
initial
begin
	CR[10] = 1'b0;
end 
// CR[ 9 ]
initial
begin
	CR[9] = 1'b0;
end 
// CR[ 8 ]
initial
begin
	CR[8] = 1'b0;
end 
// CR[ 7 ]
initial
begin
	CR[7] = 1'b0;
end 
// CR[ 6 ]
initial
begin
	CR[6] = 1'b0;
end 
// CR[ 5 ]
initial
begin
	CR[5] = 1'b0;
end 
// CR[ 4 ]
initial
begin
	CR[4] = 1'b0;
end 
// CR[ 3 ]
initial
begin
	CR[3] = 1'b0;
end 
// CR[ 2 ]
initial
begin
	CR[2] = 1'b0;
end 
// CR[ 1 ]
initial
begin
	CR[1] = 1'b1;
end 
// CR[ 0 ]
initial
begin
	CR[0] = 1'b0;
end 

// LS
initial
begin
	LS = 1'b0;
end 
// Target[ 31 ]
initial
begin
	Target[31] = 1'b0;
end 
// Target[ 30 ]
initial
begin
	Target[30] = 1'b0;
end 
// Target[ 29 ]
initial
begin
	Target[29] = 1'b0;
end 
// Target[ 28 ]
initial
begin
	Target[28] = 1'b0;
end 
// Target[ 27 ]
initial
begin
	Target[27] = 1'b0;
end 
// Target[ 26 ]
initial
begin
	Target[26] = 1'b0;
end 
// Target[ 25 ]
initial
begin
	Target[25] = 1'b0;
end 
// Target[ 24 ]
initial
begin
	Target[24] = 1'b0;
end 
// Target[ 23 ]
initial
begin
	Target[23] = 1'b0;
end 
// Target[ 22 ]
initial
begin
	Target[22] = 1'b0;
end 
// Target[ 21 ]
initial
begin
	Target[21] = 1'b0;
end 
// Target[ 20 ]
initial
begin
	Target[20] = 1'b0;
end 
// Target[ 19 ]
initial
begin
	Target[19] = 1'b0;
end 
// Target[ 18 ]
initial
begin
	Target[18] = 1'b0;
end 
// Target[ 17 ]
initial
begin
	Target[17] = 1'b0;
end 
// Target[ 16 ]
initial
begin
	Target[16] = 1'b0;
end 
// Target[ 15 ]
initial
begin
	Target[15] = 1'b0;
end 
// Target[ 14 ]
initial
begin
	Target[14] = 1'b0;
end 
// Target[ 13 ]
initial
begin
	Target[13] = 1'b0;
end 
// Target[ 12 ]
initial
begin
	Target[12] = 1'b0;
end 
// Target[ 11 ]
initial
begin
	Target[11] = 1'b0;
end 
// Target[ 10 ]
initial
begin
	Target[10] = 1'b0;
end 
// Target[ 9 ]
initial
begin
	Target[9] = 1'b0;
end 
// Target[ 8 ]
initial
begin
	Target[8] = 1'b0;
end 
// Target[ 7 ]
initial
begin
	Target[7] = 1'b0;
end 
// Target[ 6 ]
initial
begin
	Target[6] = 1'b0;
end 
// Target[ 5 ]
initial
begin
	Target[5] = 1'b0;
end 
// Target[ 4 ]
initial
begin
	Target[4] = 1'b1;
end 
// Target[ 3 ]
initial
begin
	Target[3] = 1'b0;
end 
// Target[ 2 ]
initial
begin
	Target[2] = 1'b1;
end 
// Target[ 1 ]
initial
begin
	Target[1] = 1'b0;
end 
// Target[ 0 ]
initial
begin
	Target[0] = 1'b0;
end 
// accel_steps[ 31 ]
initial
begin
	accel_steps[31] = 1'b0;
end 
// accel_steps[ 30 ]
initial
begin
	accel_steps[30] = 1'b0;
end 
// accel_steps[ 29 ]
initial
begin
	accel_steps[29] = 1'b0;
end 
// accel_steps[ 28 ]
initial
begin
	accel_steps[28] = 1'b0;
end 
// accel_steps[ 27 ]
initial
begin
	accel_steps[27] = 1'b0;
end 
// accel_steps[ 26 ]
initial
begin
	accel_steps[26] = 1'b0;
end 
// accel_steps[ 25 ]
initial
begin
	accel_steps[25] = 1'b0;
end 
// accel_steps[ 24 ]
initial
begin
	accel_steps[24] = 1'b0;
end 
// accel_steps[ 23 ]
initial
begin
	accel_steps[23] = 1'b0;
end 
// accel_steps[ 22 ]
initial
begin
	accel_steps[22] = 1'b0;
end 
// accel_steps[ 21 ]
initial
begin
	accel_steps[21] = 1'b0;
end 
// accel_steps[ 20 ]
initial
begin
	accel_steps[20] = 1'b0;
end 
// accel_steps[ 19 ]
initial
begin
	accel_steps[19] = 1'b0;
end 
// accel_steps[ 18 ]
initial
begin
	accel_steps[18] = 1'b0;
end 
// accel_steps[ 17 ]
initial
begin
	accel_steps[17] = 1'b0;
end 
// accel_steps[ 16 ]
initial
begin
	accel_steps[16] = 1'b0;
end 
// accel_steps[ 15 ]
initial
begin
	accel_steps[15] = 1'b0;
end 
// accel_steps[ 14 ]
initial
begin
	accel_steps[14] = 1'b0;
end 
// accel_steps[ 13 ]
initial
begin
	accel_steps[13] = 1'b0;
end 
// accel_steps[ 12 ]
initial
begin
	accel_steps[12] = 1'b0;
end 
// accel_steps[ 11 ]
initial
begin
	accel_steps[11] = 1'b0;
end 
// accel_steps[ 10 ]
initial
begin
	accel_steps[10] = 1'b0;
end 
// accel_steps[ 9 ]
initial
begin
	accel_steps[9] = 1'b0;
end 
// accel_steps[ 8 ]
initial
begin
	accel_steps[8] = 1'b0;
end 
// accel_steps[ 7 ]
initial
begin
	accel_steps[7] = 1'b0;
end 
// accel_steps[ 6 ]
initial
begin
	accel_steps[6] = 1'b0;
end 
// accel_steps[ 5 ]
initial
begin
	accel_steps[5] = 1'b0;
end 
// accel_steps[ 4 ]
initial
begin
	accel_steps[4] = 1'b0;
end 
// accel_steps[ 3 ]
initial
begin
	accel_steps[3] = 1'b1;
end 
// accel_steps[ 2 ]
initial
begin
	accel_steps[2] = 1'b0;
end 
// accel_steps[ 1 ]
initial
begin
	accel_steps[1] = 1'b1;
end 
// accel_steps[ 0 ]
initial
begin
	accel_steps[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 
// clk_freq_div_2[ 31 ]
initial
begin
	clk_freq_div_2[31] = 1'b0;
end 
// clk_freq_div_2[ 30 ]
initial
begin
	clk_freq_div_2[30] = 1'b0;
end 
// clk_freq_div_2[ 29 ]
initial
begin
	clk_freq_div_2[29] = 1'b0;
end 
// clk_freq_div_2[ 28 ]
initial
begin
	clk_freq_div_2[28] = 1'b0;
end 
// clk_freq_div_2[ 27 ]
initial
begin
	clk_freq_div_2[27] = 1'b0;
end 
// clk_freq_div_2[ 26 ]
initial
begin
	clk_freq_div_2[26] = 1'b0;
end 
// clk_freq_div_2[ 25 ]
initial
begin
	clk_freq_div_2[25] = 1'b0;
end 
// clk_freq_div_2[ 24 ]
initial
begin
	clk_freq_div_2[24] = 1'b0;
end 
// clk_freq_div_2[ 23 ]
initial
begin
	clk_freq_div_2[23] = 1'b0;
end 
// clk_freq_div_2[ 22 ]
initial
begin
	clk_freq_div_2[22] = 1'b0;
end 
// clk_freq_div_2[ 21 ]
initial
begin
	clk_freq_div_2[21] = 1'b0;
end 
// clk_freq_div_2[ 20 ]
initial
begin
	clk_freq_div_2[20] = 1'b0;
end 
// clk_freq_div_2[ 19 ]
initial
begin
	clk_freq_div_2[19] = 1'b0;
end 
// clk_freq_div_2[ 18 ]
initial
begin
	clk_freq_div_2[18] = 1'b0;
end 
// clk_freq_div_2[ 17 ]
initial
begin
	clk_freq_div_2[17] = 1'b0;
end 
// clk_freq_div_2[ 16 ]
initial
begin
	clk_freq_div_2[16] = 1'b0;
end 
// clk_freq_div_2[ 15 ]
initial
begin
	clk_freq_div_2[15] = 1'b0;
end 
// clk_freq_div_2[ 14 ]
initial
begin
	clk_freq_div_2[14] = 1'b0;
end 
// clk_freq_div_2[ 13 ]
initial
begin
	clk_freq_div_2[13] = 1'b0;
end 
// clk_freq_div_2[ 12 ]
initial
begin
	clk_freq_div_2[12] = 1'b0;
end 
// clk_freq_div_2[ 11 ]
initial
begin
	clk_freq_div_2[11] = 1'b0;
end 
// clk_freq_div_2[ 10 ]
initial
begin
	clk_freq_div_2[10] = 1'b0;
end 
// clk_freq_div_2[ 9 ]
initial
begin
	clk_freq_div_2[9] = 1'b1;
end 
// clk_freq_div_2[ 8 ]
initial
begin
	clk_freq_div_2[8] = 1'b1;
end 
// clk_freq_div_2[ 7 ]
initial
begin
	clk_freq_div_2[7] = 1'b1;
end 
// clk_freq_div_2[ 6 ]
initial
begin
	clk_freq_div_2[6] = 1'b1;
end 
// clk_freq_div_2[ 5 ]
initial
begin
	clk_freq_div_2[5] = 1'b1;
end 
// clk_freq_div_2[ 4 ]
initial
begin
	clk_freq_div_2[4] = 1'b0;
end 
// clk_freq_div_2[ 3 ]
initial
begin
	clk_freq_div_2[3] = 1'b1;
end 
// clk_freq_div_2[ 2 ]
initial
begin
	clk_freq_div_2[2] = 1'b0;
end 
// clk_freq_div_2[ 1 ]
initial
begin
	clk_freq_div_2[1] = 1'b0;
end 
// clk_freq_div_2[ 0 ]
initial
begin
	clk_freq_div_2[0] = 1'b0;
end 
// freq_increment[ 31 ]
initial
begin
	freq_increment[31] = 1'b0;
end 
// freq_increment[ 30 ]
initial
begin
	freq_increment[30] = 1'b0;
end 
// freq_increment[ 29 ]
initial
begin
	freq_increment[29] = 1'b0;
end 
// freq_increment[ 28 ]
initial
begin
	freq_increment[28] = 1'b0;
end 
// freq_increment[ 27 ]
initial
begin
	freq_increment[27] = 1'b0;
end 
// freq_increment[ 26 ]
initial
begin
	freq_increment[26] = 1'b0;
end 
// freq_increment[ 25 ]
initial
begin
	freq_increment[25] = 1'b0;
end 
// freq_increment[ 24 ]
initial
begin
	freq_increment[24] = 1'b0;
end 
// freq_increment[ 23 ]
initial
begin
	freq_increment[23] = 1'b0;
end 
// freq_increment[ 22 ]
initial
begin
	freq_increment[22] = 1'b0;
end 
// freq_increment[ 21 ]
initial
begin
	freq_increment[21] = 1'b0;
end 
// freq_increment[ 20 ]
initial
begin
	freq_increment[20] = 1'b0;
end 
// freq_increment[ 19 ]
initial
begin
	freq_increment[19] = 1'b0;
end 
// freq_increment[ 18 ]
initial
begin
	freq_increment[18] = 1'b0;
end 
// freq_increment[ 17 ]
initial
begin
	freq_increment[17] = 1'b0;
end 
// freq_increment[ 16 ]
initial
begin
	freq_increment[16] = 1'b0;
end 
// freq_increment[ 15 ]
initial
begin
	freq_increment[15] = 1'b0;
end 
// freq_increment[ 14 ]
initial
begin
	freq_increment[14] = 1'b0;
end 
// freq_increment[ 13 ]
initial
begin
	freq_increment[13] = 1'b0;
end 
// freq_increment[ 12 ]
initial
begin
	freq_increment[12] = 1'b0;
end 
// freq_increment[ 11 ]
initial
begin
	freq_increment[11] = 1'b0;
end 
// freq_increment[ 10 ]
initial
begin
	freq_increment[10] = 1'b0;
end 
// freq_increment[ 9 ]
initial
begin
	freq_increment[9] = 1'b0;
end 
// freq_increment[ 8 ]
initial
begin
	freq_increment[8] = 1'b0;
end 
// freq_increment[ 7 ]
initial
begin
	freq_increment[7] = 1'b0;
end 
// freq_increment[ 6 ]
initial
begin
	freq_increment[6] = 1'b0;
end 
// freq_increment[ 5 ]
initial
begin
	freq_increment[5] = 1'b0;
end 
// freq_increment[ 4 ]
initial
begin
	freq_increment[4] = 1'b0;
end 
// freq_increment[ 3 ]
initial
begin
	freq_increment[3] = 1'b1;
end 
// freq_increment[ 2 ]
initial
begin
	freq_increment[2] = 1'b0;
end 
// freq_increment[ 1 ]
initial
begin
	freq_increment[1] = 1'b1;
end 
// freq_increment[ 0 ]
initial
begin
	freq_increment[0] = 1'b0;
end 
// home_location[ 31 ]
initial
begin
	home_location[31] = 1'b0;
end 
// home_location[ 30 ]
initial
begin
	home_location[30] = 1'b0;
end 
// home_location[ 29 ]
initial
begin
	home_location[29] = 1'b0;
end 
// home_location[ 28 ]
initial
begin
	home_location[28] = 1'b0;
end 
// home_location[ 27 ]
initial
begin
	home_location[27] = 1'b0;
end 
// home_location[ 26 ]
initial
begin
	home_location[26] = 1'b0;
end 
// home_location[ 25 ]
initial
begin
	home_location[25] = 1'b0;
end 
// home_location[ 24 ]
initial
begin
	home_location[24] = 1'b0;
end 
// home_location[ 23 ]
initial
begin
	home_location[23] = 1'b0;
end 
// home_location[ 22 ]
initial
begin
	home_location[22] = 1'b0;
end 
// home_location[ 21 ]
initial
begin
	home_location[21] = 1'b0;
end 
// home_location[ 20 ]
initial
begin
	home_location[20] = 1'b0;
end 
// home_location[ 19 ]
initial
begin
	home_location[19] = 1'b0;
end 
// home_location[ 18 ]
initial
begin
	home_location[18] = 1'b0;
end 
// home_location[ 17 ]
initial
begin
	home_location[17] = 1'b0;
end 
// home_location[ 16 ]
initial
begin
	home_location[16] = 1'b0;
end 
// home_location[ 15 ]
initial
begin
	home_location[15] = 1'b0;
end 
// home_location[ 14 ]
initial
begin
	home_location[14] = 1'b0;
end 
// home_location[ 13 ]
initial
begin
	home_location[13] = 1'b0;
end 
// home_location[ 12 ]
initial
begin
	home_location[12] = 1'b0;
end 
// home_location[ 11 ]
initial
begin
	home_location[11] = 1'b0;
end 
// home_location[ 10 ]
initial
begin
	home_location[10] = 1'b0;
end 
// home_location[ 9 ]
initial
begin
	home_location[9] = 1'b0;
end 
// home_location[ 8 ]
initial
begin
	home_location[8] = 1'b0;
end 
// home_location[ 7 ]
initial
begin
	home_location[7] = 1'b0;
end 
// home_location[ 6 ]
initial
begin
	home_location[6] = 1'b0;
end 
// home_location[ 5 ]
initial
begin
	home_location[5] = 1'b0;
end 
// home_location[ 4 ]
initial
begin
	home_location[4] = 1'b0;
end 
// home_location[ 3 ]
initial
begin
	home_location[3] = 1'b0;
end 
// home_location[ 2 ]
initial
begin
	home_location[2] = 1'b0;
end 
// home_location[ 1 ]
initial
begin
	home_location[1] = 1'b0;
end 
// home_location[ 0 ]
initial
begin
	home_location[0] = 1'b0;
end 
// homing_speed_freq[ 31 ]
initial
begin
	homing_speed_freq[31] = 1'b0;
end 
// homing_speed_freq[ 30 ]
initial
begin
	homing_speed_freq[30] = 1'b0;
end 
// homing_speed_freq[ 29 ]
initial
begin
	homing_speed_freq[29] = 1'b0;
end 
// homing_speed_freq[ 28 ]
initial
begin
	homing_speed_freq[28] = 1'b0;
end 
// homing_speed_freq[ 27 ]
initial
begin
	homing_speed_freq[27] = 1'b0;
end 
// homing_speed_freq[ 26 ]
initial
begin
	homing_speed_freq[26] = 1'b0;
end 
// homing_speed_freq[ 25 ]
initial
begin
	homing_speed_freq[25] = 1'b0;
end 
// homing_speed_freq[ 24 ]
initial
begin
	homing_speed_freq[24] = 1'b0;
end 
// homing_speed_freq[ 23 ]
initial
begin
	homing_speed_freq[23] = 1'b0;
end 
// homing_speed_freq[ 22 ]
initial
begin
	homing_speed_freq[22] = 1'b0;
end 
// homing_speed_freq[ 21 ]
initial
begin
	homing_speed_freq[21] = 1'b0;
end 
// homing_speed_freq[ 20 ]
initial
begin
	homing_speed_freq[20] = 1'b0;
end 
// homing_speed_freq[ 19 ]
initial
begin
	homing_speed_freq[19] = 1'b0;
end 
// homing_speed_freq[ 18 ]
initial
begin
	homing_speed_freq[18] = 1'b0;
end 
// homing_speed_freq[ 17 ]
initial
begin
	homing_speed_freq[17] = 1'b0;
end 
// homing_speed_freq[ 16 ]
initial
begin
	homing_speed_freq[16] = 1'b0;
end 
// homing_speed_freq[ 15 ]
initial
begin
	homing_speed_freq[15] = 1'b0;
end 
// homing_speed_freq[ 14 ]
initial
begin
	homing_speed_freq[14] = 1'b0;
end 
// homing_speed_freq[ 13 ]
initial
begin
	homing_speed_freq[13] = 1'b0;
end 
// homing_speed_freq[ 12 ]
initial
begin
	homing_speed_freq[12] = 1'b0;
end 
// homing_speed_freq[ 11 ]
initial
begin
	homing_speed_freq[11] = 1'b0;
end 
// homing_speed_freq[ 10 ]
initial
begin
	homing_speed_freq[10] = 1'b0;
end 
// homing_speed_freq[ 9 ]
initial
begin
	homing_speed_freq[9] = 1'b0;
end 
// homing_speed_freq[ 8 ]
initial
begin
	homing_speed_freq[8] = 1'b0;
end 
// homing_speed_freq[ 7 ]
initial
begin
	homing_speed_freq[7] = 1'b0;
end 
// homing_speed_freq[ 6 ]
initial
begin
	homing_speed_freq[6] = 1'b0;
end 
// homing_speed_freq[ 5 ]
initial
begin
	homing_speed_freq[5] = 1'b0;
end 
// homing_speed_freq[ 4 ]
initial
begin
	homing_speed_freq[4] = 1'b0;
end 
// homing_speed_freq[ 3 ]
initial
begin
	homing_speed_freq[3] = 1'b1;
end 
// homing_speed_freq[ 2 ]
initial
begin
	homing_speed_freq[2] = 1'b0;
end 
// homing_speed_freq[ 1 ]
initial
begin
	homing_speed_freq[1] = 1'b1;
end 
// homing_speed_freq[ 0 ]
initial
begin
	homing_speed_freq[0] = 1'b0;
end 
// lower_limit[ 31 ]
initial
begin
	lower_limit[31] = 1'b0;
end 
// lower_limit[ 30 ]
initial
begin
	lower_limit[30] = 1'b0;
end 
// lower_limit[ 29 ]
initial
begin
	lower_limit[29] = 1'b0;
end 
// lower_limit[ 28 ]
initial
begin
	lower_limit[28] = 1'b0;
end 
// lower_limit[ 27 ]
initial
begin
	lower_limit[27] = 1'b0;
end 
// lower_limit[ 26 ]
initial
begin
	lower_limit[26] = 1'b0;
end 
// lower_limit[ 25 ]
initial
begin
	lower_limit[25] = 1'b0;
end 
// lower_limit[ 24 ]
initial
begin
	lower_limit[24] = 1'b0;
end 
// lower_limit[ 23 ]
initial
begin
	lower_limit[23] = 1'b0;
end 
// lower_limit[ 22 ]
initial
begin
	lower_limit[22] = 1'b0;
end 
// lower_limit[ 21 ]
initial
begin
	lower_limit[21] = 1'b0;
end 
// lower_limit[ 20 ]
initial
begin
	lower_limit[20] = 1'b0;
end 
// lower_limit[ 19 ]
initial
begin
	lower_limit[19] = 1'b0;
end 
// lower_limit[ 18 ]
initial
begin
	lower_limit[18] = 1'b0;
end 
// lower_limit[ 17 ]
initial
begin
	lower_limit[17] = 1'b0;
end 
// lower_limit[ 16 ]
initial
begin
	lower_limit[16] = 1'b0;
end 
// lower_limit[ 15 ]
initial
begin
	lower_limit[15] = 1'b0;
end 
// lower_limit[ 14 ]
initial
begin
	lower_limit[14] = 1'b0;
end 
// lower_limit[ 13 ]
initial
begin
	lower_limit[13] = 1'b0;
end 
// lower_limit[ 12 ]
initial
begin
	lower_limit[12] = 1'b0;
end 
// lower_limit[ 11 ]
initial
begin
	lower_limit[11] = 1'b0;
end 
// lower_limit[ 10 ]
initial
begin
	lower_limit[10] = 1'b0;
end 
// lower_limit[ 9 ]
initial
begin
	lower_limit[9] = 1'b0;
end 
// lower_limit[ 8 ]
initial
begin
	lower_limit[8] = 1'b0;
end 
// lower_limit[ 7 ]
initial
begin
	lower_limit[7] = 1'b0;
end 
// lower_limit[ 6 ]
initial
begin
	lower_limit[6] = 1'b0;
end 
// lower_limit[ 5 ]
initial
begin
	lower_limit[5] = 1'b0;
end 
// lower_limit[ 4 ]
initial
begin
	lower_limit[4] = 1'b0;
end 
// lower_limit[ 3 ]
initial
begin
	lower_limit[3] = 1'b0;
end 
// lower_limit[ 2 ]
initial
begin
	lower_limit[2] = 1'b0;
end 
// lower_limit[ 1 ]
initial
begin
	lower_limit[1] = 1'b0;
end 
// lower_limit[ 0 ]
initial
begin
	lower_limit[0] = 1'b0;
end 
// max_speed_freq[ 31 ]
initial
begin
	max_speed_freq[31] = 1'b0;
end 
// max_speed_freq[ 30 ]
initial
begin
	max_speed_freq[30] = 1'b0;
end 
// max_speed_freq[ 29 ]
initial
begin
	max_speed_freq[29] = 1'b0;
end 
// max_speed_freq[ 28 ]
initial
begin
	max_speed_freq[28] = 1'b0;
end 
// max_speed_freq[ 27 ]
initial
begin
	max_speed_freq[27] = 1'b0;
end 
// max_speed_freq[ 26 ]
initial
begin
	max_speed_freq[26] = 1'b0;
end 
// max_speed_freq[ 25 ]
initial
begin
	max_speed_freq[25] = 1'b0;
end 
// max_speed_freq[ 24 ]
initial
begin
	max_speed_freq[24] = 1'b0;
end 
// max_speed_freq[ 23 ]
initial
begin
	max_speed_freq[23] = 1'b0;
end 
// max_speed_freq[ 22 ]
initial
begin
	max_speed_freq[22] = 1'b0;
end 
// max_speed_freq[ 21 ]
initial
begin
	max_speed_freq[21] = 1'b0;
end 
// max_speed_freq[ 20 ]
initial
begin
	max_speed_freq[20] = 1'b0;
end 
// max_speed_freq[ 19 ]
initial
begin
	max_speed_freq[19] = 1'b0;
end 
// max_speed_freq[ 18 ]
initial
begin
	max_speed_freq[18] = 1'b0;
end 
// max_speed_freq[ 17 ]
initial
begin
	max_speed_freq[17] = 1'b0;
end 
// max_speed_freq[ 16 ]
initial
begin
	max_speed_freq[16] = 1'b0;
end 
// max_speed_freq[ 15 ]
initial
begin
	max_speed_freq[15] = 1'b0;
end 
// max_speed_freq[ 14 ]
initial
begin
	max_speed_freq[14] = 1'b0;
end 
// max_speed_freq[ 13 ]
initial
begin
	max_speed_freq[13] = 1'b0;
end 
// max_speed_freq[ 12 ]
initial
begin
	max_speed_freq[12] = 1'b0;
end 
// max_speed_freq[ 11 ]
initial
begin
	max_speed_freq[11] = 1'b0;
end 
// max_speed_freq[ 10 ]
initial
begin
	max_speed_freq[10] = 1'b0;
end 
// max_speed_freq[ 9 ]
initial
begin
	max_speed_freq[9] = 1'b0;
end 
// max_speed_freq[ 8 ]
initial
begin
	max_speed_freq[8] = 1'b0;
end 
// max_speed_freq[ 7 ]
initial
begin
	max_speed_freq[7] = 1'b0;
end 
// max_speed_freq[ 6 ]
initial
begin
	max_speed_freq[6] = 1'b0;
end 
// max_speed_freq[ 5 ]
initial
begin
	max_speed_freq[5] = 1'b1;
end 
// max_speed_freq[ 4 ]
initial
begin
	max_speed_freq[4] = 1'b1;
end 
// max_speed_freq[ 3 ]
initial
begin
	max_speed_freq[3] = 1'b0;
end 
// max_speed_freq[ 2 ]
initial
begin
	max_speed_freq[2] = 1'b0;
end 
// max_speed_freq[ 1 ]
initial
begin
	max_speed_freq[1] = 1'b1;
end 
// max_speed_freq[ 0 ]
initial
begin
	max_speed_freq[0] = 1'b0;
end 
// min_speed_freq[ 31 ]
initial
begin
	min_speed_freq[31] = 1'b0;
end 
// min_speed_freq[ 30 ]
initial
begin
	min_speed_freq[30] = 1'b0;
end 
// min_speed_freq[ 29 ]
initial
begin
	min_speed_freq[29] = 1'b0;
end 
// min_speed_freq[ 28 ]
initial
begin
	min_speed_freq[28] = 1'b0;
end 
// min_speed_freq[ 27 ]
initial
begin
	min_speed_freq[27] = 1'b0;
end 
// min_speed_freq[ 26 ]
initial
begin
	min_speed_freq[26] = 1'b0;
end 
// min_speed_freq[ 25 ]
initial
begin
	min_speed_freq[25] = 1'b0;
end 
// min_speed_freq[ 24 ]
initial
begin
	min_speed_freq[24] = 1'b0;
end 
// min_speed_freq[ 23 ]
initial
begin
	min_speed_freq[23] = 1'b0;
end 
// min_speed_freq[ 22 ]
initial
begin
	min_speed_freq[22] = 1'b0;
end 
// min_speed_freq[ 21 ]
initial
begin
	min_speed_freq[21] = 1'b0;
end 
// min_speed_freq[ 20 ]
initial
begin
	min_speed_freq[20] = 1'b0;
end 
// min_speed_freq[ 19 ]
initial
begin
	min_speed_freq[19] = 1'b0;
end 
// min_speed_freq[ 18 ]
initial
begin
	min_speed_freq[18] = 1'b0;
end 
// min_speed_freq[ 17 ]
initial
begin
	min_speed_freq[17] = 1'b0;
end 
// min_speed_freq[ 16 ]
initial
begin
	min_speed_freq[16] = 1'b0;
end 
// min_speed_freq[ 15 ]
initial
begin
	min_speed_freq[15] = 1'b0;
end 
// min_speed_freq[ 14 ]
initial
begin
	min_speed_freq[14] = 1'b0;
end 
// min_speed_freq[ 13 ]
initial
begin
	min_speed_freq[13] = 1'b0;
end 
// min_speed_freq[ 12 ]
initial
begin
	min_speed_freq[12] = 1'b0;
end 
// min_speed_freq[ 11 ]
initial
begin
	min_speed_freq[11] = 1'b0;
end 
// min_speed_freq[ 10 ]
initial
begin
	min_speed_freq[10] = 1'b0;
end 
// min_speed_freq[ 9 ]
initial
begin
	min_speed_freq[9] = 1'b0;
end 
// min_speed_freq[ 8 ]
initial
begin
	min_speed_freq[8] = 1'b0;
end 
// min_speed_freq[ 7 ]
initial
begin
	min_speed_freq[7] = 1'b0;
end 
// min_speed_freq[ 6 ]
initial
begin
	min_speed_freq[6] = 1'b0;
end 
// min_speed_freq[ 5 ]
initial
begin
	min_speed_freq[5] = 1'b0;
end 
// min_speed_freq[ 4 ]
initial
begin
	min_speed_freq[4] = 1'b0;
end 
// min_speed_freq[ 3 ]
initial
begin
	min_speed_freq[3] = 1'b0;
end 
// min_speed_freq[ 2 ]
initial
begin
	min_speed_freq[2] = 1'b0;
end 
// min_speed_freq[ 1 ]
initial
begin
	min_speed_freq[1] = 1'b1;
end 
// min_speed_freq[ 0 ]
initial
begin
	min_speed_freq[0] = 1'b0;
end 

// rst
initial
begin
	rst = 1'b0;
	rst = #40000 1'b1;
end 
// upper_limit[ 31 ]
initial
begin
	upper_limit[31] = 1'b0;
end 
// upper_limit[ 30 ]
initial
begin
	upper_limit[30] = 1'b0;
end 
// upper_limit[ 29 ]
initial
begin
	upper_limit[29] = 1'b0;
end 
// upper_limit[ 28 ]
initial
begin
	upper_limit[28] = 1'b0;
end 
// upper_limit[ 27 ]
initial
begin
	upper_limit[27] = 1'b0;
end 
// upper_limit[ 26 ]
initial
begin
	upper_limit[26] = 1'b0;
end 
// upper_limit[ 25 ]
initial
begin
	upper_limit[25] = 1'b0;
end 
// upper_limit[ 24 ]
initial
begin
	upper_limit[24] = 1'b0;
end 
// upper_limit[ 23 ]
initial
begin
	upper_limit[23] = 1'b0;
end 
// upper_limit[ 22 ]
initial
begin
	upper_limit[22] = 1'b0;
end 
// upper_limit[ 21 ]
initial
begin
	upper_limit[21] = 1'b0;
end 
// upper_limit[ 20 ]
initial
begin
	upper_limit[20] = 1'b0;
end 
// upper_limit[ 19 ]
initial
begin
	upper_limit[19] = 1'b0;
end 
// upper_limit[ 18 ]
initial
begin
	upper_limit[18] = 1'b0;
end 
// upper_limit[ 17 ]
initial
begin
	upper_limit[17] = 1'b0;
end 
// upper_limit[ 16 ]
initial
begin
	upper_limit[16] = 1'b0;
end 
// upper_limit[ 15 ]
initial
begin
	upper_limit[15] = 1'b0;
end 
// upper_limit[ 14 ]
initial
begin
	upper_limit[14] = 1'b0;
end 
// upper_limit[ 13 ]
initial
begin
	upper_limit[13] = 1'b0;
end 
// upper_limit[ 12 ]
initial
begin
	upper_limit[12] = 1'b0;
end 
// upper_limit[ 11 ]
initial
begin
	upper_limit[11] = 1'b0;
end 
// upper_limit[ 10 ]
initial
begin
	upper_limit[10] = 1'b0;
end 
// upper_limit[ 9 ]
initial
begin
	upper_limit[9] = 1'b0;
end 
// upper_limit[ 8 ]
initial
begin
	upper_limit[8] = 1'b0;
end 
// upper_limit[ 7 ]
initial
begin
	upper_limit[7] = 1'b0;
end 
// upper_limit[ 6 ]
initial
begin
	upper_limit[6] = 1'b1;
end 
// upper_limit[ 5 ]
initial
begin
	upper_limit[5] = 1'b1;
end 
// upper_limit[ 4 ]
initial
begin
	upper_limit[4] = 1'b0;
end 
// upper_limit[ 3 ]
initial
begin
	upper_limit[3] = 1'b0;
end 
// upper_limit[ 2 ]
initial
begin
	upper_limit[2] = 1'b1;
end 
// upper_limit[ 1 ]
initial
begin
	upper_limit[1] = 1'b0;
end 
// upper_limit[ 0 ]
initial
begin
	upper_limit[0] = 1'b0;
end 
endmodule

